<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSS on Bigshans&#39; Blog</title>
    <link>https://bigshans.github.io/tags/css/</link>
    <description>Recent content in CSS on Bigshans&#39; Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>bigshans</copyright>
    <lastBuildDate>Fri, 13 Jan 2023 09:27:13 +0800</lastBuildDate>
    <atom:link href="https://bigshans.github.io/tags/css/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CSS 盒子模型</title>
      <link>https://bigshans.github.io/post/css-box/</link>
      <pubDate>Fri, 13 Jan 2023 09:27:13 +0800</pubDate>
      <guid>https://bigshans.github.io/post/css-box/</guid>
      <description>&lt;p&gt;一个 HTML 文档在浏览器内将会被解析为一棵文档树，这是众所周知的。 CSS&#xA;的盒子模型则描述了文档上的每一个节点所生成的模型，这是 CSS&#xA;布局排版的基础。&lt;/p&gt;&#xA;&lt;h2 id=&#34;标准盒型&#34;&gt;标准盒型&lt;/h2&gt;&#xA;&lt;figure&gt;&#xA;&lt;img src=&#34;https://www.w3.org/TR/2016/WD-CSS22-20160412/images/boxdim.png&#34; alt=&#34;盒子模型示意图&#34;/&gt;&#xA;&lt;figcaption aria-hidden=&#34;true&#34;&gt;盒子模型示意图&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;每一个盒子都一块内容（content）区域，围绕内容从内向外分别是内边距、边框和外边距（padding&#xA;、 border 、 margin）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSS 三栏布局</title>
      <link>https://bigshans.github.io/post/css%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/</link>
      <pubDate>Tue, 10 Jan 2023 09:27:35 +0800</pubDate>
      <guid>https://bigshans.github.io/post/css%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/</guid>
      <description>&lt;p&gt;三栏布局是比较经典的 CSS&#xA;布局，特点就是中间内容自适应，首先渲染，其次左右内容大小保持不变分布两旁。结构上打破了一般意义上的左中右的顺序，变成了中左右的顺序，但视觉展示仍然要求是左中右的布局，于是，如何将中间内容放回到中间，并重新分布左右则是此类技术的核心所在。在&#xA;&lt;code&gt;flex&lt;/code&gt; 之前，前端多用 &lt;code&gt;float&lt;/code&gt;&#xA;实现，出现了双飞翼和圣杯布局两种实现，现在我们可以用 &lt;code&gt;flex&lt;/code&gt;&#xA;来很简单的实现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>drop-shadow 隐藏原始图像</title>
      <link>https://bigshans.github.io/post/drop-shadow-hidden-origin-image/</link>
      <pubDate>Fri, 03 Dec 2021 16:32:50 +0800</pubDate>
      <guid>https://bigshans.github.io/post/drop-shadow-hidden-origin-image/</guid>
      <description>&lt;p&gt;看到张鑫大佬的&lt;a href=&#34;https://www.zhangxinxu.com/wordpress/2016/06/png-icon-change-color-by-css/&#34;&gt;这篇文章&lt;/a&gt;很有意思。&lt;/p&gt;&#xA;&lt;p&gt;张鑫大佬讲述了如何使用 &lt;code&gt;filter&lt;/code&gt; 中的 &lt;code&gt;drop-shadow&lt;/code&gt; 实现 png 图标改颜色的技巧，本质上是利用阴影偏移实现的。不过我有一点我一直没有搞明白就是如何将原始图像遮住。&lt;/p&gt;</description>
    </item>
    <item>
      <title>为什么 overflow 能够清除 float</title>
      <link>https://bigshans.github.io/post/why-bfc-can-clear-flow/</link>
      <pubDate>Sun, 07 Nov 2021 17:27:40 +0800</pubDate>
      <guid>https://bigshans.github.io/post/why-bfc-can-clear-flow/</guid>
      <description>&lt;p&gt;有些学问还是自己研究最为靠谱，像是 &lt;code&gt;overflow&lt;/code&gt; 为什么能清 &lt;code&gt;float&lt;/code&gt; ，都知道是 BFC ，但是为什么呢？因为在文档流中，普通的 &lt;code&gt;div&lt;/code&gt; 其实也是 &lt;code&gt;BFC&lt;/code&gt; ，所以，理论上添加 &lt;code&gt;overflow&lt;/code&gt; 为非 &lt;code&gt;visible&lt;/code&gt; 的时候，它也仍然是 BFC 啊？所以，问题在哪里呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>css绘制三角形</title>
      <link>https://bigshans.github.io/post/css%E7%BB%98%E5%88%B6%E4%B8%89%E8%A7%92%E5%BD%A2/</link>
      <pubDate>Sun, 22 Dec 2019 21:21:47 +0000</pubDate>
      <guid>https://bigshans.github.io/post/css%E7%BB%98%E5%88%B6%E4%B8%89%E8%A7%92%E5%BD%A2/</guid>
      <description>&lt;p&gt;最近写前端要一个下拉箭头，所以选择用 css 画一个三角形来用，话不多说，看代码：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
