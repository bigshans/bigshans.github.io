<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on Bigshans&#39; Blog</title>
    <link>https://bigshans.github.io/tags/javascript/</link>
    <description>Recent content in javascript on Bigshans&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>bigshans</copyright>
    <lastBuildDate>Tue, 24 Aug 2021 18:20:53 +0800</lastBuildDate><atom:link href="https://bigshans.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 Sharp 压缩图片、改变图片大小</title>
      <link>https://bigshans.github.io/post/sharp/</link>
      <pubDate>Tue, 24 Aug 2021 18:20:53 +0800</pubDate>
      
      <guid>https://bigshans.github.io/post/sharp/</guid>
      <description>因为业务需要就写了个图片压缩服务，顺带改变大小，因为用的是 nodejs ，于是我就选择了 sharp ，基于 libvips。 代码非常好写： function resize(input, x, y) { return sharp(input) .resize(x, y, { fit: &#39;inside&#39; })</description>
    </item>
    
    <item>
      <title>函数式的骨感</title>
      <link>https://bigshans.github.io/post/function-comment/</link>
      <pubDate>Tue, 24 Aug 2021 17:22:43 +0800</pubDate>
      
      <guid>https://bigshans.github.io/post/function-comment/</guid>
      <description>最近读了点 rambda 的源码。函数式是个很诱人的概念，借助函数式，你可以以十分数学的方式解决一些问题。虽然如此，函数式对于现实来说仍然过于抽象，如果我</description>
    </item>
    
    <item>
      <title>如何写一个深拷贝函数</title>
      <link>https://bigshans.github.io/post/how-to-write-a-deep-copy-function/</link>
      <pubDate>Sun, 22 Aug 2021 14:52:42 +0800</pubDate>
      
      <guid>https://bigshans.github.io/post/how-to-write-a-deep-copy-function/</guid>
      <description>跟小伙伴们讨论的时候发现，es6 的解构其实和 Object.assign 一样属于是浅拷贝。那么一个深拷贝到底该怎么写呢？我个人阅读了一下 lodash 、 rambda 、 rfdc 的实现，发现思想其实</description>
    </item>
    
    <item>
      <title>如何编写一个 Chrome 扩展</title>
      <link>https://bigshans.github.io/post/chrome-extensions/</link>
      <pubDate>Sun, 15 Aug 2021 14:48:54 +0800</pubDate>
      
      <guid>https://bigshans.github.io/post/chrome-extensions/</guid>
      <description>最近工作需要用到 Chrome 扩展，于是就特意学习了一下。起初，我以为 Chrome 扩展权限挺大，操作起来应该挺方便的，但是，实际情况各种权限需要申请，而且有些操作</description>
    </item>
    
    <item>
      <title>分布式锁的简单实现</title>
      <link>https://bigshans.github.io/post/src-node-%E7%AE%80%E5%8D%95%E7%9A%84%E9%94%81%E5%AE%9E%E7%8E%B0-js/</link>
      <pubDate>Sun, 20 Oct 2019 10:11:38 +0000</pubDate>
      
      <guid>https://bigshans.github.io/post/src-node-%E7%AE%80%E5%8D%95%E7%9A%84%E9%94%81%E5%AE%9E%E7%8E%B0-js/</guid>
      <description>&lt;p&gt;打算每周写一篇博客，希望每周都能有新的收获。本周写的博客是我在工作中应用写的一个有趣的东西。
我们采用 pm2 进行进程管理，我们开启了多个进程，但各个进程之间并没有交流，所以，我想要全局操作某个变量时，就会出现数据安全问题，虽然在 redis 里面单个操作是原子，但我也要保证复合操作也是原子的。但我并不使用 redis 的事务，是因为这个事务会阻塞其他操作，所以，不如在应用层上实现锁，从而不阻塞 redis 。我们虽然不是分布式系统，但是是分布式进程，所以实现也参考分布式锁。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>js 实现 DOM 监视</title>
      <link>https://bigshans.github.io/post/js-dom-watch/</link>
      <pubDate>Sun, 07 Oct 2018 15:53:19 +0000</pubDate>
      
      <guid>https://bigshans.github.io/post/js-dom-watch/</guid>
      <description>&lt;p&gt;花了点时间做了 b 站评论区地址链接化，比较麻烦的是 DOM 监视。找了很多，最后还是采用了 Muatation 来进行事件监视。&lt;/p&gt;
&lt;p&gt;给个文档地址：http://javascript.ruanyifeng.com/dom/mutationobserver.html 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>新写了两个油猴脚本</title>
      <link>https://bigshans.github.io/post/js-tampermonkey-user-script/</link>
      <pubDate>Fri, 05 Oct 2018 13:35:27 +0000</pubDate>
      
      <guid>https://bigshans.github.io/post/js-tampermonkey-user-script/</guid>
      <description>&lt;p&gt;新写了两个油猴脚本针对 bilibili 。具体可以到我的 gist 上看，一个是针对番剧更新的，原本有一个番剧更新的脚本，但只是加了个标签而已，我又加了一些东西，方便查看，不过具体效果一般，而且番剧状态不能很好的体现，现没有找到好的 api 。另一个是针对 bilibili 动态的，动态不能点击链接很麻烦，于是简单写了脚本来实现将地址转换为链接。要点击进去才能有效，不过去除了带中文的链接。 bilibili 动态不能很好的选中也是一个问题，不过已经有脚本很好的实现了这个问题，所以我就不多写了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>将 router 的 js 混成一个</title>
      <link>https://bigshans.github.io/post/net-musicvue-problem-set2/</link>
      <pubDate>Mon, 27 Aug 2018 17:53:56 +0000</pubDate>
      
      <guid>https://bigshans.github.io/post/net-musicvue-problem-set2/</guid>
      <description>&lt;p&gt;NeteaseCloudMusicApi 得重构，首先得把 router 目录下的一大堆给归拢为一个 js 方便 exports 。然而下面有九十多个文件，所以一个个复制粘贴是不现实的，更何况未来这些文件有改动，于上游一 merge ，这代码得改得老痛苦了。所以决定自己写一个小工具解决这个问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nodejs 的 import</title>
      <link>https://bigshans.github.io/post/nodejs-es6-import/</link>
      <pubDate>Sun, 26 Aug 2018 20:29:41 +0000</pubDate>
      
      <guid>https://bigshans.github.io/post/nodejs-es6-import/</guid>
      <description>&lt;p&gt;nodejs 对 es 6 的支持目前并不完全，直接使用 import 不行，exports 也不行，可以用 babel 之类的编译， nodejs 10 可以尝试加上 flag ： &amp;ndash;experimental-modules。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;node --experimental-modules my-app.mjs
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>webpack 的 require 和 import 相关的一点问题</title>
      <link>https://bigshans.github.io/post/net-musicvue-problem-set1/</link>
      <pubDate>Sun, 26 Aug 2018 12:41:45 +0000</pubDate>
      
      <guid>https://bigshans.github.io/post/net-musicvue-problem-set1/</guid>
      <description>&lt;p&gt;今天继续用 electron-vue 写 NeteaseCloudMusic 的第三方 app， 用的 NeteaseCloudMusicApi 使用起来却很麻烦。不知道为什么之前可以正常使用，现在却不行了，摸索了好久，还是没能解决。不过还是有点收获的，接下来讲一讲。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
