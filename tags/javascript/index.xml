<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Bigshans&#39; Blog</title>
    <link>https://bigshans.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on Bigshans&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>bigshans</copyright>
    <lastBuildDate>Sat, 14 Oct 2023 11:52:10 +0800</lastBuildDate><atom:link href="https://bigshans.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>函数柯里化</title>
      <link>https://bigshans.github.io/post/curry/</link>
      <pubDate>Sat, 14 Oct 2023 11:52:10 +0800</pubDate>
      
      <guid>https://bigshans.github.io/post/curry/</guid>
      <description>函数柯里化是一种可以将函数转换为另一个函数的技巧，通常是用来减少函数参数的。 用一个简单的例子以表示这种使用: function sum(a, b) { return a + b; } const add1 = curry((b) =&amp;gt; sum(1, b));</description>
    </item>
    
    <item>
      <title>JavaScript 的标签模板字符串</title>
      <link>https://bigshans.github.io/post/tagged-template-string/</link>
      <pubDate>Fri, 16 Dec 2022 10:49:05 +0800</pubDate>
      
      <guid>https://bigshans.github.io/post/tagged-template-string/</guid>
      <description>标签模板是个看起来很 Magic 的语法，写起来像是这样。 console.log`Hello, World!`; // Output: [&amp;#34;Hello, World!&amp;#34;] 实际上，这里的模板标签被转换成这样的一句调用。 console.log.call(console, [&amp;#39;Hello, World!&amp;#39;]); 如果我们有用变量的话， const name = &amp;#39;world&amp;#39;;</description>
    </item>
    
    <item>
      <title>《事件捕获与事件冒泡》补遗</title>
      <link>https://bigshans.github.io/post/%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</link>
      <pubDate>Tue, 17 May 2022 10:46:28 +0800</pubDate>
      
      <guid>https://bigshans.github.io/post/%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</guid>
      <description>阅读的文章是关于事件捕获与事件冒泡先后执行顺序 ，写得挺好的，就是我读的时候漏了一点。 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width&amp;quot;&amp;gt; &amp;lt;title&amp;gt;DOM 冒泡&amp;lt;/title&amp;gt; &amp;lt;style type=&amp;quot;text/css&amp;quot;</description>
    </item>
    
    <item>
      <title>sort 在 Chrome 和 Firefox 表现不同</title>
      <link>https://bigshans.github.io/post/different-sort-between-firefox-and-chrome/</link>
      <pubDate>Thu, 31 Mar 2022 10:18:10 +0800</pubDate>
      
      <guid>https://bigshans.github.io/post/different-sort-between-firefox-and-chrome/</guid>
      <description>首先，这个区别不算 BUG ，因为标准并没有规定该怎么排，但这个细微区别在实现一些特殊需求时需要被注意到。 注意下面一段代码： var a = [1, 1, 1, 1, 1]; a = a.map((k, i)</description>
    </item>
    
    <item>
      <title>RxJs 初探 —— 基于事件为中心的编程</title>
      <link>https://bigshans.github.io/post/rxjs-exploration/</link>
      <pubDate>Sat, 02 Oct 2021 22:19:12 +0800</pubDate>
      
      <guid>https://bigshans.github.io/post/rxjs-exploration/</guid>
      <description>这是我学习 RxJs 的一些整理 ，其实 RxJs 是个 FRP 库，理解它应该从 FRP 来落脚，但一开始就讲函数式就太难了，而且放在初学者面前未免喧宾夺主了，所以我从事件开始</description>
    </item>
    
    <item>
      <title>使用 Sharp 压缩图片、改变图片大小</title>
      <link>https://bigshans.github.io/post/sharp/</link>
      <pubDate>Tue, 24 Aug 2021 18:20:53 +0800</pubDate>
      
      <guid>https://bigshans.github.io/post/sharp/</guid>
      <description>因为业务需要就写了个图片压缩服务，顺带改变大小，因为用的是 nodejs ，于是我就选择了 sharp ，基于 libvips。 代码非常好写： function resize(input, x, y) { return sharp(input) .resize(x, y, { fit: &#39;inside&#39; })</description>
    </item>
    
    <item>
      <title>函数式的骨感</title>
      <link>https://bigshans.github.io/post/function-comment/</link>
      <pubDate>Tue, 24 Aug 2021 17:22:43 +0800</pubDate>
      
      <guid>https://bigshans.github.io/post/function-comment/</guid>
      <description>最近读了点 rambda 的源码。函数式是个很诱人的概念，借助函数式，你可以以十分数学的方式解决一些问题。虽然如此，函数式对于现实来说仍然过于抽象，如果我</description>
    </item>
    
    <item>
      <title>如何写一个深拷贝函数</title>
      <link>https://bigshans.github.io/post/how-to-write-a-deep-copy-function/</link>
      <pubDate>Sun, 22 Aug 2021 14:52:42 +0800</pubDate>
      
      <guid>https://bigshans.github.io/post/how-to-write-a-deep-copy-function/</guid>
      <description>跟小伙伴们讨论的时候发现，es6 的解构其实和 Object.assign 一样属于是浅拷贝。那么一个深拷贝到底该怎么写呢？我个人阅读了一下 lodash 、 rambda 、 rfdc 的实现，发现思想其实</description>
    </item>
    
    <item>
      <title>如何编写一个 Chrome 扩展</title>
      <link>https://bigshans.github.io/post/chrome-extensions/</link>
      <pubDate>Sun, 15 Aug 2021 14:48:54 +0800</pubDate>
      
      <guid>https://bigshans.github.io/post/chrome-extensions/</guid>
      <description>最近工作需要用到 Chrome 扩展，于是就特意学习了一下。起初，我以为 Chrome 扩展权限挺大，操作起来应该挺方便的，但是，实际情况各种权限需要申请，而且有些操作</description>
    </item>
    
    <item>
      <title>js 实现 DOM 监视</title>
      <link>https://bigshans.github.io/post/js-dom-watch/</link>
      <pubDate>Sun, 07 Oct 2018 15:53:19 +0000</pubDate>
      
      <guid>https://bigshans.github.io/post/js-dom-watch/</guid>
      <description>&lt;p&gt;花了点时间做了 b 站评论区地址链接化，比较麻烦的是 DOM 监视。找了很多，最后还是采用了 Muatation 来进行事件监视。&lt;/p&gt;
&lt;p&gt;给个文档地址：http://javascript.ruanyifeng.com/dom/mutationobserver.html 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>新写了两个油猴脚本</title>
      <link>https://bigshans.github.io/post/js-tampermonkey-user-script/</link>
      <pubDate>Fri, 05 Oct 2018 13:35:27 +0000</pubDate>
      
      <guid>https://bigshans.github.io/post/js-tampermonkey-user-script/</guid>
      <description>&lt;p&gt;新写了两个油猴脚本针对 bilibili 。具体可以到我的 gist 上看，一个是针对番剧更新的，原本有一个番剧更新的脚本，但只是加了个标签而已，我又加了一些东西，方便查看，不过具体效果一般，而且番剧状态不能很好的体现，现没有找到好的 api 。另一个是针对 bilibili 动态的，动态不能点击链接很麻烦，于是简单写了脚本来实现将地址转换为链接。要点击进去才能有效，不过去除了带中文的链接。 bilibili 动态不能很好的选中也是一个问题，不过已经有脚本很好的实现了这个问题，所以我就不多写了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>将 router 的 js 混成一个</title>
      <link>https://bigshans.github.io/post/net-musicvue-problem-set2/</link>
      <pubDate>Mon, 27 Aug 2018 17:53:56 +0000</pubDate>
      
      <guid>https://bigshans.github.io/post/net-musicvue-problem-set2/</guid>
      <description>&lt;p&gt;NeteaseCloudMusicApi 得重构，首先得把 router 目录下的一大堆给归拢为一个 js 方便 exports 。然而下面有九十多个文件，所以一个个复制粘贴是不现实的，更何况未来这些文件有改动，于上游一 merge ，这代码得改得老痛苦了。所以决定自己写一个小工具解决这个问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nodejs 的 import</title>
      <link>https://bigshans.github.io/post/nodejs-es6-import/</link>
      <pubDate>Sun, 26 Aug 2018 20:29:41 +0000</pubDate>
      
      <guid>https://bigshans.github.io/post/nodejs-es6-import/</guid>
      <description>&lt;p&gt;nodejs 对 es 6 的支持目前并不完全，直接使用 import 不行，exports 也不行，可以用 babel 之类的编译， nodejs 10 可以尝试加上 flag ： &amp;ndash;experimental-modules。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;node --experimental-modules my-app.mjs
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>webpack 的 require 和 import 相关的一点问题</title>
      <link>https://bigshans.github.io/post/net-musicvue-problem-set1/</link>
      <pubDate>Sun, 26 Aug 2018 12:41:45 +0000</pubDate>
      
      <guid>https://bigshans.github.io/post/net-musicvue-problem-set1/</guid>
      <description>&lt;p&gt;今天继续用 electron-vue 写 NeteaseCloudMusic 的第三方 app， 用的 NeteaseCloudMusicApi 使用起来却很麻烦。不知道为什么之前可以正常使用，现在却不行了，摸索了好久，还是没能解决。不过还是有点收获的，接下来讲一讲。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
